@use 'sass:map';
@use './config.scss' as *;
@use './function.scss' as *;
@use './var.scss' as *;

@mixin b($block) {
  $B: $namespace + $blockSuffix-separator + $block !global;
  .#{$B} {
    @content;
  }
}

// 生成 css 名称例如：&--primary
// 可以作为 css 的选择器 例： $currentSelector: button--primary
@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector +
      $selector +
      $modifier-separator +
      $unit +
      ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

// set all css var for component by map
@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    @if $attribute == 'default' {
      #{getCssVarName($name)}: #{$value};
    } @else {
      #{getCssVarName($name, $attribute)}: #{$value};
    }
  }
}



@mixin set-css-var-value($name, $value) {
  @if $value != '' {
    #{joinVarName($name)}: #{$value};
  }
}

@mixin set-css-color-type($type) {
  $color: map.get($colors, $type);
  @include set-css-var-value(
    ('color', $type),
    #{map.get($colors, $type)}
  );
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

// 设置按钮样式 padding, font-size, border-radius
@mixin button-size(
  $padding-vertical,
  $padding-horizontal,
  $font-size,
  $border-radius
) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  border-radius: $border-radius;
  &.is-round {
    padding: $padding-vertical $padding-horizontal;
  }
}

@mixin set-style-css-var($style,$interaction,$type,$variables){
  @each $attribute, $value in $variables {
    @if $type == $attribute {
      #{joinVarName(($style,'color',$interaction,$type))}: #{$value}
    }
  }
}

// 拼接 css 名称
// $varName: --el-button-text-color
// $gVarName: --el-text-color
@mixin css-var-from-global($var, $gVar) {
  $varName: joinVarName($var);
  $gVarName: joinVarName($gVar);
  #{$varName}: var(#{$gVarName});
}

// 特殊状态
@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

@mixin button-plain($type) {
  $button-color-types: (
    '': (
      'text-color': (
        'color',
        $type,
      ),
      'bg-color': (
        'color',
        $type
      ),
      'border-color': (
        'color',
        $type
      ),
    ),
    'hover': (
      'text-color': (
        'color',
        'white',
      ),
      'bg-color': (
        'color',
        $type,
      ),
      'border-color': (
        'color',
        $type,
      ),
    ),
    'active': (
      'text-color': (
        'color',
        'white',
      ),
    ),
  );

  @each $type, $typeMap in $button-color-types {
    @each $typeColor, $list in $typeMap {
      @include css-var-from-global(('button', $type, $typeColor), $list);
    }
  }

  &.is-disabled {
    &,
    &:hover,
    &:focus,
    &:active {
      color: getCssVar('color', $type, 'light-5');
      background-color: getCssVar('color', $type, 'light-9');
      border-color: getCssVar('color', $type, 'light-8');
    }
  }
}

@mixin button-variant($type) {
  $button-color-types: (
    '': (
      'text-color': (
        'color',
        'white'
      ),
      'bg-color': (
        'color',
        $type,
      ),
      'border-color': (
        'color',
        $type,
      ),
      'outline-color': (
        'color',
        $type
      ),
      'active-color': (
        'color',
        $type
      ),
    ),
    'hover': (
      'text-color': (
        'color',
        'white',
      ),
      'link-text-color': (
        'link-text-color-hover',
        $type
      ),
      'bg-color': (
        'bg-color-hover',
        $type
      ),
      'border-color': (
        'border-color-hover',
        $type
      ),
    ),
    'active': (
      'text-color': (
        'color',
        'white',
      ),

      'bg-color': (
        'bg-color-active',
        $type
      ),
      'border-color': (
        'border-color-active',
        $type
      ),
    ),
    'disabled': (
      'text-color': (
        'color',
        'white',
      ),
      'bg-color': (
        'bg-color-disabled',
        $type,
      ),
      'border-color': (
        'border-color-disabled',
        $type,
      ),
    ),
  );

  @each $type, $typeMap in $button-color-types {
    @each $typeColor, $list in $typeMap {
      @include css-var-from-global(('button', $type, $typeColor), $list);
    }
  }

  &.is-plain,
  &.is-text,
  &.is-link {
    @include button-plain($type);
  }
}
