import type * as vscode from 'vscode-languageserver-protocol';
import type { TextDocument } from 'vscode-languageserver-textdocument';
import type { SourceFile } from './sourceFile';
import type { CssSourceMap, HtmlSourceMap, TeleportSourceMap, TsSourceMap } from './utils/sourceMaps';
import type { TsMappingData } from '@volar/vue-code-gen';
export interface SourceFiles extends ReturnType<typeof createSourceFiles> {
}
export declare function createSourceFiles(): {
    getUris: () => string[];
    getDirs: () => string[];
    getAll: () => SourceFile[];
    get: (_uri: string) => SourceFile | undefined;
    set: (_uri: string, item: SourceFile) => void;
    delete: (_uri: string) => boolean;
    getTsTeleports: (lsType: 'script' | 'template') => Map<string, TeleportSourceMap>;
    getTsDocuments: (lsType: 'script' | 'template') => Map<string, TextDocument>;
    getTsSourceMaps: (lsType: 'script' | 'template') => Map<string, TsSourceMap>;
    getSourceFileByTsUri: (lsType: 'script' | 'template', uri: string) => SourceFile | undefined;
    getCssSourceMaps: () => Map<string, CssSourceMap>;
    getHtmlSourceMaps: () => Map<string, HtmlSourceMap>;
    toTsLocations: (uri: string, start: vscode.Position, end?: vscode.Position | undefined, filter?: ((data: TsMappingData) => boolean) | undefined, sourceMapFilter?: ((sourceMap: TsSourceMap) => boolean) | undefined) => Generator<{
        lsType: "script" | "template";
        type: "embedded-ts";
        sourceMap: TsSourceMap;
        uri: string;
        range: {
            start: vscode.Position;
            end: vscode.Position;
        };
        data: TsMappingData;
    } | {
        lsType: "script" | "template";
        type: "source-ts";
        uri: string;
        range: {
            start: vscode.Position;
            end: vscode.Position;
        };
        sourceMap?: undefined;
        data?: undefined;
    }, void, unknown>;
    fromTsLocation: (lsType: 'script' | 'template', uri: string, start: vscode.Position, end?: vscode.Position | undefined, filter?: ((data: TsMappingData) => boolean) | undefined, sourceMapFilter?: ((sourceMap: TsSourceMap) => boolean) | undefined) => Generator<{
        type: "embedded-ts";
        sourceMap: TsSourceMap;
        uri: string;
        range: {
            start: vscode.Position;
            end: vscode.Position;
        };
        data: TsMappingData;
    } | {
        type: "source-ts";
        uri: string;
        range: {
            start: vscode.Position;
            end: vscode.Position;
        };
        sourceMap?: undefined;
        data?: undefined;
    }, void, unknown>;
    fromTsLocation2: (lsType: 'script' | 'template', uri: string, start: number, end?: number | undefined, filter?: ((data: TsMappingData) => boolean) | undefined, sourceMapFilter?: ((sourceMap: TsSourceMap) => boolean) | undefined) => Generator<{
        type: "embedded-ts";
        sourceMap: TsSourceMap;
        uri: string;
        range: {
            start: number;
            end: number;
        };
        data: TsMappingData;
    } | {
        type: "source-ts";
        uri: string;
        range: {
            start: number;
            end: number;
        };
        sourceMap?: undefined;
        data?: undefined;
    }, void, unknown>;
};
