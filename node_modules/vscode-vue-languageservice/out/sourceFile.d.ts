import * as shared from '@volar/shared';
import { TextDocument } from 'vscode-languageserver-textdocument';
import type * as ts2 from 'vscode-typescript-languageservice';
import { ITemplateScriptData, LanguageServiceContext } from './types';
export interface SourceFile extends ReturnType<typeof createSourceFile> {
}
export declare function createSourceFile(uri: string, _content: string, _version: string, context: LanguageServiceContext): {
    uri: string;
    getVersion: () => string;
    getTemplateTagNames: () => Record<string, {
        rawComponent: string;
        slotsComponent: string;
        baseProps: string;
        emit: string;
        slots: string;
        events: Record<string, string>;
        offsets: number[];
    }> | undefined;
    getTemplateAttrNames: () => Set<string> | undefined;
    getTextDocument: () => shared.TextDocument;
    getTemplateScriptDocument: () => shared.TextDocument | undefined;
    update: (newContent: string, newVersion: string) => {
        scriptContentUpdated: boolean;
        scriptUpdated: boolean;
        templateScriptUpdated: boolean;
    };
    updateTemplateScript: (templateTsLs: ts2.LanguageService) => boolean;
    getScriptTsDocument: () => shared.TextDocument;
    getScriptTsSourceMap: () => import(".").TsSourceMap;
    getTsSourceMaps: () => import(".").TsSourceMap[];
    getCssSourceMaps: () => import(".").CssSourceMap[];
    getJsonSourceMaps: () => import(".").JsonSourceMap[];
    getHtmlSourceMaps: () => import(".").HtmlSourceMap[];
    getPugSourceMaps: () => import(".").PugSourceMap[];
    getTemplateScriptData: () => import("@vue/reactivity").ShallowReactive<ITemplateScriptData>;
    getDescriptor: () => shared.Sfc;
    getScriptAst: () => import("typescript/lib/tsserverlibrary").SourceFile | undefined;
    getScriptSetupAst: () => import("typescript/lib/tsserverlibrary").SourceFile | undefined;
    getVueHtmlDocument: () => shared.HTMLDocument;
    getScriptSetupData: () => {
        importSectionEndOffset: number;
        notOnTopTypeExports: import("@volar/vue-code-gen").TextRange[];
        bindings: import("@volar/vue-code-gen").TextRange[];
        typeBindings: import("@volar/vue-code-gen").TextRange[];
        withDefaultsArg: import("@volar/vue-code-gen").TextRange | undefined;
        propsRuntimeArg: import("@volar/vue-code-gen").TextRange | undefined;
        propsTypeArg: import("@volar/vue-code-gen").TextRange | undefined;
        emitsRuntimeArg: import("@volar/vue-code-gen").TextRange | undefined;
        emitsTypeArg: import("@volar/vue-code-gen").TextRange | undefined;
        emitsTypeNums: number;
        exposeRuntimeArg: import("@volar/vue-code-gen").TextRange | undefined;
    } | undefined;
    docLsScripts: () => {
        documents: shared.TextDocument[];
        sourceMaps: import(".").TsSourceMap[];
    };
    getTemplateFormattingScript: () => {
        document: shared.TextDocument | undefined;
        sourceMap: import(".").TsSourceMap | undefined;
    };
    getSfcRefSugarRanges: () => {
        refs: {
            flag: import("@volar/vue-code-gen").TextRange;
            leftBindings: import("@volar/vue-code-gen").TextRange[];
            rightFn: import("@volar/vue-code-gen").TextRange;
        }[];
        raws: {
            fullRange: import("@volar/vue-code-gen").TextRange;
            argsRange: import("@volar/vue-code-gen").TextRange;
        }[];
    } | undefined;
    refs: {
        document: import("@vue/reactivity").ComputedRef<shared.TextDocument>;
        descriptor: shared.Sfc;
        lastUpdated: {
            template: boolean;
            script: boolean;
            scriptSetup: boolean;
        };
        scriptSetupRanges: import("@vue/reactivity").ComputedRef<{
            importSectionEndOffset: number;
            notOnTopTypeExports: import("@volar/vue-code-gen").TextRange[];
            bindings: import("@volar/vue-code-gen").TextRange[];
            typeBindings: import("@volar/vue-code-gen").TextRange[];
            withDefaultsArg: import("@volar/vue-code-gen").TextRange | undefined;
            propsRuntimeArg: import("@volar/vue-code-gen").TextRange | undefined;
            propsTypeArg: import("@volar/vue-code-gen").TextRange | undefined;
            emitsRuntimeArg: import("@volar/vue-code-gen").TextRange | undefined;
            emitsTypeArg: import("@volar/vue-code-gen").TextRange | undefined;
            emitsTypeNums: number;
            exposeRuntimeArg: import("@volar/vue-code-gen").TextRange | undefined;
        } | undefined>;
        sfcJsons: {
            textDocuments: import("@vue/reactivity").ComputedRef<{
                index: number;
                textDocument: shared.TextDocument;
                jsonDocument: import("vscode-json-languageservice").JSONDocument;
            }[]>;
            sourceMaps: import("@vue/reactivity").ComputedRef<import(".").JsonSourceMap[]>;
        };
        sfcTemplate: {
            textDocument: import("@vue/reactivity").ComputedRef<shared.TextDocument | undefined>;
            htmlSourceMap: import("@vue/reactivity").ComputedRef<import(".").HtmlSourceMap | undefined>;
            pugSourceMap: import("@vue/reactivity").ComputedRef<import(".").PugSourceMap | undefined>;
            htmlDocument: import("@vue/reactivity").ComputedRef<shared.HTMLDocument | undefined>;
            pugDocument: import("@vue/reactivity").ComputedRef<{
                pugTextDocument: shared.TextDocument;
                htmlTextDocument: shared.TextDocument;
                htmlDocument: shared.HTMLDocument;
                pugCode: string;
                htmlCode: string;
                sourceMap: import("@volar/source-map").SourceMap<{
                    isEmptyTagCompletion: boolean;
                } | undefined>;
                error: {
                    code: string;
                    msg: string;
                    line: number;
                    column: number;
                    filename: string;
                } | undefined;
                ast: import("packages/vscode-pug-languageservice/src/pugDocument").Node | undefined;
            } | undefined>;
        };
        sfcTemplateData: import("@vue/reactivity").ComputedRef<{
            sourceLang: 'html' | 'pug';
            html: string;
            htmlTextDocument: TextDocument;
            htmlToTemplate: (start: number, end: number) => number | undefined;
        } | undefined>;
        sfcTemplateCompileResult: import("@vue/reactivity").ComputedRef<{
            ast: import("@vue/compiler-core").RootNode | undefined;
            errors: import("vscode-languageserver-protocol").Diagnostic[];
        } | undefined>;
        sfcTemplateScript: {
            templateCodeGens: import("@vue/reactivity").ComputedRef<{
                codeGen: import("@volar/code-gen").CodeGen<import("@volar/vue-code-gen").TsMappingData>;
                formatCodeGen: import("@volar/code-gen").CodeGen<import("@volar/vue-code-gen").TsMappingData>;
                cssCodeGen: import("@volar/code-gen").CodeGen<undefined>;
                tagNames: Record<string, {
                    rawComponent: string;
                    slotsComponent: string;
                    baseProps: string;
                    emit: string;
                    slots: string;
                    events: Record<string, string>;
                    offsets: number[];
                }>;
                attrNames: Set<string>;
            } | undefined>;
            sourceMap: import("@vue/reactivity").ComputedRef<import(".").TsSourceMap | undefined>;
            textDocument: import("@vue/reactivity").Ref<shared.TextDocument | undefined>;
            textDocumentForFormatting: import("@vue/reactivity").Ref<shared.TextDocument | undefined>;
            sourceMapForFormatting: import("@vue/reactivity").ComputedRef<import(".").TsSourceMap | undefined>;
            teleportSourceMap: import("@vue/reactivity").Ref<import(".").TeleportSourceMap | undefined>;
            cssTextDocument: import("@vue/reactivity").ComputedRef<{
                textDocument: shared.TextDocument;
                stylesheet: import("vscode-css-languageservice").Stylesheet;
                links: never[];
                module: boolean;
                scoped: boolean;
            } | undefined>;
            cssSourceMap: import("@vue/reactivity").ComputedRef<import(".").CssSourceMap | undefined>;
            update: () => void;
        };
        sfcEntryForTemplateLs: {
            textDocument: import("@vue/reactivity").ComputedRef<shared.TextDocument>;
            sourceMap: import("@vue/reactivity").ComputedRef<import(".").TsSourceMap | undefined>;
        };
        sfcScriptForScriptLs: {
            lang: import("@vue/reactivity").ComputedRef<string>;
            textDocument: import("@vue/reactivity").ComputedRef<shared.TextDocument>;
            textDocumentTs: import("@vue/reactivity").ComputedRef<shared.TextDocument | undefined>;
            sourceMap: import("@vue/reactivity").ComputedRef<import(".").TsSourceMap>;
            teleportSourceMap: import("@vue/reactivity").ComputedRef<import(".").TeleportSourceMap>;
        };
        sfcScriptForTemplateLs: {
            lang: import("@vue/reactivity").ComputedRef<string>;
            textDocument: import("@vue/reactivity").ComputedRef<shared.TextDocument | undefined>;
            textDocumentTs: import("@vue/reactivity").ComputedRef<shared.TextDocument | undefined>;
            sourceMap: import("@vue/reactivity").ComputedRef<import(".").TsSourceMap | undefined>;
            teleportSourceMap: import("@vue/reactivity").ComputedRef<import(".").TeleportSourceMap | undefined>;
        };
        templateScriptData: import("@vue/reactivity").ShallowReactive<ITemplateScriptData>;
        cssLsDocuments: import("@vue/reactivity").ComputedRef<({
            textDocument: shared.TextDocument;
            stylesheet: import("vscode-css-languageservice").Stylesheet;
            links: never[];
            module: boolean;
            scoped: boolean;
        } | {
            textDocument: shared.TextDocument;
            stylesheet: import("vscode-css-languageservice").Stylesheet | undefined;
            binds: import("@volar/vue-code-gen").TextRange[];
            links: {
                textDocument: shared.TextDocument;
                stylesheet: import("vscode-css-languageservice").Stylesheet;
            }[];
            module: string | undefined;
            scoped: boolean;
        })[]>;
        cssLsSourceMaps: import("@vue/reactivity").ComputedRef<import(".").CssSourceMap[]>;
        scriptLsDocuments: import("@vue/reactivity").ComputedRef<shared.TextDocument[]>;
        scriptLsSourceMaps: import("@vue/reactivity").ComputedRef<import(".").TsSourceMap[]>;
        templateLsDocuments: import("@vue/reactivity").ComputedRef<shared.TextDocument[]>;
        templateLsSourceMaps: import("@vue/reactivity").ComputedRef<import(".").TsSourceMap[]>;
        templateLsTeleports: import("@vue/reactivity").ComputedRef<import(".").TeleportSourceMap[]>;
    };
};
